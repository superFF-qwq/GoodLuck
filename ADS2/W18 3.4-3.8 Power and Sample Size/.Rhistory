labs(title = "Visulization of categorical data of mice",
x = "geneX",
y = "sex",
color = "lifespan",
size = "Value")
df <- as.data.frame(as.table(data2))
# 重命名列
colnames(df) <- c("geneX", "lifespan", "sex", "value")
df$geneX[df$geneX == "A"] = "WT"
df$geneX[df$geneX == "B"] = "KO"
df$lifespan[df$lifespan == "A"] = "Alive"
df$lifespan[df$lifespan == "B"] = "Dead"
df$sex[df$sex == "A"] = "Male"
df$sex[df$sex == "B"] = "Female"
# 使用ggplot2绘制散点图
ggplot(df, aes(x = geneX, y = lifespan, color = factor(sex), size = value)) +
geom_point(alpha = 0.7, position = position_jitter()) +
scale_size_continuous(range = c(1, 5)) + # 调整点的大小范围
theme_minimal() +
labs(title = "Visulization of categorical data of mice",
x = "GeneX",
y = "Lifespan",
color = "Sex",
size = "Value")
# 重命名列
colnames(df) <- c("geneX", "lifespan", "sex", "value")
df
df
df <- as.data.frame(as.table(data2))
# 重命名列
colnames(df) <- c("geneX", "lifespan", "sex", "value")
df
df$geneX[df$geneX == "A"] = "WT"
df$geneX[df$geneX == "B"] = "KO"
df$lifespan[df$lifespan == "A"] = "Alive"
df$lifespan[df$lifespan == "B"] = "Dead"
df$sex[df$sex == "A"] = "Male"
df$sex[df$sex == "B"] = "Female"
df <- as.data.frame(as.table(data2))
# 重命名列
colnames(df) <- c("geneX", "lifespan", "sex", "value")
df
df$geneX[df$geneX == "A"] = "WT"
df$geneX[which(df$geneX == "A")] = "WT"
df <- as.data.frame(as.table(data2))
# 重命名列
colnames(df) <- c("geneX", "lifespan", "sex", "value")
df
df$geneX[which(df$geneX == "A")] = "WT"
df <- as.data.frame(as.table(data2))
# 重命名列
colnames(df) <- c("geneX", "lifespan", "sex", "value")
df
which(df$geneX == "A")
df$geneX[which(df$geneX == "A")] = "WT"
df <- as.data.frame(as.table(data2))
# 重命名列
colnames(df) <- c("geneX", "lifespan", "sex", "value")
df
which(df$geneX == "A")
df$geneX[which(df$geneX == "A")]
str(df)
df <- as.data.frame(as.table(data2))
df$geneX = as.character(df$geneX)
df <- as.data.frame(as.table(data2))
df$geneX = as.character(df$geneX)
df <- as.data.frame(as.table(data2))
df$geneX = as.character(df$geneX)
df <- as.data.frame(as.table(data2))
df$geneX = as.character(df$geneX)
str(df)
df <- as.data.frame(as.table(data2))
str(df)
colnames(df) <- c("geneX", "lifespan", "sex", "value")
df$geneX = as.character(df$geneX)
df$lifespan = as.character(df$lifespan)
df$sex = as.character(df$sex)
# 重命名列
df
df$geneX[df$geneX == "A"] = "WT"
df$geneX[df$geneX == "B"] = "KO"
df$lifespan[df$lifespan == "A"] = "Alive"
df$lifespan[df$lifespan == "B"] = "Dead"
df$sex[df$sex == "A"] = "Male"
df$sex[df$sex == "B"] = "Female"
df
ggplot(df, aes(x = geneX, y = lifespan, color = factor(sex), size = value)) +
geom_point(alpha = 0.7, position = position_jitter()) +
scale_size_continuous(range = c(1, 5)) + # 调整点的大小范围
theme_minimal() +
labs(title = "Visulization of categorical data of mice",
x = "GeneX",
y = "Lifespan",
color = "Sex",
size = "Value")
ggplot(df, aes(x = geneX, y = lifespan, color = factor(sex), size = value)) +
geom_point(alpha = 0.7, position = position_jitter(width = 0.1, height = 0.1)) +
scale_size_continuous(range = c(1, 5)) + # 调整点的大小范围
theme_minimal() +
labs(title = "Visulization of categorical data of mice",
x = "GeneX",
y = "Lifespan",
color = "Sex",
size = "Value")
data2
df
df2 = spread(df, key = "lifespan", value = "value")
df2
df2$survial_rate = df2$Alive / (df2$Alive + df2$Dead)
df2
df2 = df2[, -which(names(df) == "Alive" | names(df) == "Dead")]
df2
df2 = spread(df, key = "lifespan", value = "value")
df2$survial_rate = df2$Alive / (df2$Alive + df2$Dead)
df2 = df2[, -which(names(df) == "Alive" | names(df) == "Dead")]
df2
df2 = spread(df, key = "lifespan", value = "value")
df2$survial_rate = df2$Alive / (df2$Alive + df2$Dead)
df2 = df2[, -which("Alive" | "Dead")]
df2 = spread(df, key = "lifespan", value = "value")
df2$survial_rate = df2$Alive / (df2$Alive + df2$Dead)
df2 = df2[, -which(unique(names(df) == "Alive" | names(df) == "Dead"))]
df2
df2 = spread(df, key = "lifespan", value = "value")
df2$survial_rate = df2$Alive / (df2$Alive + df2$Dead)
df2 = df2[, -unique(which(names(df) == "Alive"),which(names(df) == "Dead"))]
df2
df2 = spread(df, key = "lifespan", value = "value")
df2$survial_rate = df2$Alive / (df2$Alive + df2$Dead)
unique(which(names(df) == "Alive"),which(names(df) == "Dead"))
df2 = spread(df, key = "lifespan", value = "value")
df2$survial_rate = df2$Alive / (df2$Alive + df2$Dead)
which(names(df) == "Alive")
which(names(df) == "Dead")
df2 = spread(df, key = "lifespan", value = "value")
df2$survial_rate = df2$Alive / (df2$Alive + df2$Dead)
names(df)
names(df2)
which(names(df2) == "Alive")
which(names(df2) == "Dead")
df2 = spread(df, key = "lifespan", value = "value")
df2$survial_rate = df2$Alive / (df2$Alive + df2$Dead)
df2 = df2[, -which(names(df2) == "Alive"),which(names(df2) == "Dead")]
df2
df2 = spread(df, key = "lifespan", value = "value")
df2$survial_rate = df2$Alive / (df2$Alive + df2$Dead)
df2 = df2[, -which(names(df2) == "Alive" | names(df2) == "Dead")]
df2
df2 = spread(df, key = "lifespan", value = "value")
df2$survial_rate = df2$Alive / (df2$Alive + df2$Dead)
# df2 = df2[, -which(names(df2) == "Alive" | names(df2) == "Dead")]
df2
model = aov(survial_rate ~ geneX * sex, data = df2)
# H0: There is no effect of geneX and sex on survival of mice.
# HA: At least one of these factors (geneX or sex) influences survival of mice.
hist(resid(model))
model = aov(survial_rate ~ geneX * sex, data = df2)
# H0: There is no effect of geneX and sex on survival of mice.
# HA: At least one of these factors (geneX or sex) influences survival of mice.
hist(resid(model))
plot(model, 2)
# df2 = df2[, -which(names(df2) == "Alive" | names(df2) == "Dead")]
df2
summary(model)
# H0: There is no effect of geneX and sex on survival of mice.
# HA: At least one of these factors (geneX or sex) influences survival of mice.
hist(resid(model))
plot(model, 2)
resid(model)
summary(model)
shapiro.test(resid(model))
plot(model, 1)
summary(model)
TukeyHSD(model)
# index = which.min(abs(den$x - pos))
# if(index == length(den$x)){
#   p_value = 0
# } else{
#   p_value = sum(den$y[(index+1):length(den$x)]) * (den$x[2] - den$x[1])
# }
# p_value
sum(pos >= data) / length(data)
pos
sum(data >= pos) / length(data)
## 1.2
# df = 4
df4 = rchisq(n = reptimes, df = 4)
plot_df = data.frame(df4, simulation = data)
plot_df
plot_df = gather(plot_df, key = "method", value = "chisq_value")
plot_df
summary(plot_df)
str(plot_df)
plot_df = as.factor(plot_df)
plot_df
str(plot_df)
plot_df = as.factor(plot_df)
plot_df$method = as.factor(plot_df$method)
str(plot_df)
ggplot(data = plot_df, mapping = aes(x = chisq, color = method)) +
geom_density()
ggplot(data = plot_df, mapping = aes(x = chisq_value, color = method)) +
geom_density()
dname <- list(genotype = c("WT", "KO"),
lifespan = c("Alive", "Dead"),
sex = c("Male", "Female")
)
dimnames(data2) = dname
data2
mice = as.table(data2)
summary(mice)
mice
chisq_value
if(sum(s1) != total | sum(s2)!= total | sum(s3) != total)
print("FALSE!!!")
for(i in 1:2)
for (j in 1:2)
for (k in 1:2) {
s1 = apply(data2, 1, sum)
s2 = apply(data2, 2, sum)
s3 = apply(data2, 3, sum)
if(sum(s1) != total | sum(s2)!= total | sum(s3) != total){
print("FALSE!!!")
}
expected_p = c(expected_p,
s1[i] / total * s2[j] / total * s3[k] / total)
}
expected_p
sum(expected_p)
expected_p = {}
for(i in 1:2)
for (j in 1:2)
for (k in 1:2) {
s1 = apply(data2, 1, sum)
s2 = apply(data2, 2, sum)
s3 = apply(data2, 3, sum)
if(sum(s1) != total | sum(s2)!= total | sum(s3) != total){
print("FALSE!!!")
}
expected_p = c(expected_p,
s1[i] / total * s2[j] / total * s3[k] / total)
}
expected_p
sum(expected_p)
expected_data2 = expected_p * total
expected_data2
observed_data2 = array(data2, dim = length(data2))
observed_data2
chisq_value = sum((observed_data2 - expected_data2) ^ 2 / expected_data2)
chisq_value
data.frame(mice)
mice = data.frame(mice)
str(mice)
ggplot(data = mice, mapping = aes(x = genotype, y = lifespan, color = sex)) +
geom_point(mapping = aes(size = Freq)) +
facet_grid(.~sex)
ggplot(data = mice, mapping = aes(x = genotype, y = lifespan, color = sex)) +
geom_point(mapping = aes(size = Freq)) +
facet_grid(~sex)
ggplot(data = mice, mapping = aes(x = genotype, y = lifespan, color = sex)) +
geom_point(mapping = aes(size = Freq)) +
facet_grid(~sex.)
ggplot(data = mice, mapping = aes(x = genotype, y = lifespan, color = sex)) +
geom_point(mapping = aes(size = Freq)) +
facet_grid(~sex)
g = ggplot(data = mice, mapping = aes(x = genotype, y = lifespan, color = sex))
g = g + geom_point(mapping = aes(size = Freq))
g
g = g + facet_grid(~sex)
g
install.packages("rcompanion")
library(rcompanion)
data2
data2[1,,]
fisher.test(data2[1,,])
fisher.test(data2[2,,])
fisher.test(data2[,1,])
chisq_value = sum((observed_data2 - expected_data2) ^ 2 / expected_data2)
fisher.test(data2[,2,])
fisher.test(data2[,1,])
fisher.test(data2[1,,])
fisher.test(data2[,,1])
fisher.test(data2[,,2])
fisher.test(data2)
mat = matrix(c(7, 2, 3, 7), nrow = 2, byrow = T)
fisher.test(mat)
mouse_data2 <- matrix(c(40, 9, 34, 7, 20, 15, 25, 20), nrow = 2, byrow = T)
layername(mouse_data2)
mouse_data2 <- matrix(c(40, 9, 34, 7, 20, 15, 25, 20), nrow = 2, byrow = T)
dimnames(mouse_data2) = list(c(“(
mouse_data2 <- matrix(c(40, 9, 34, 7, 20, 15, 25, 20), nrow = 2, byrow = T)
dimnames(mouse_data2) = list(c(“(
mouse_data2 <- matrix(c(40, 9, 34, 7, 20, 15, 25, 20), nrow = 2, byrow = T)
dimnames(mouse_data2) = list(c("WT_Male", "WT_Female", "KO_Male", "KO_Female")”),
dimnames(mouse_data2) = list(c("WT_Male", "WT_Female", "KO_Male", "KO_Female"),
c("Alive", "Dead"))
mouse_data2 <- matrix(c(40, 9, 34, 7, 20, 15, 25, 20), nrow = 2, byrow = T)
dimnames(mouse_data2) = list(c("WT_Male", "WT_Female", "KO_Male", "KO_Female"),
c("Alive", "Dead"))
mouse_data2 <-
matrix(c(40, 9, 34, 7, 20, 15, 25, 20), nrow = 2, byrow = T)
dimnames(mouse_data2) = list(c("Alive", "Dead"),
c("WT_Male", "WT_Female", "KO_Male", "KO_Female"))
mouse_data2
chisq.test(mice)
mouse_data2 <-
matrix(c(40, 9, 34, 7, 20, 15, 25, 20), nrow = 2, byrow = T)
dimnames(mouse_data2) = list(c("Alive", "Dead"),
c("WT_Male", "WT_Female", "KO_Male", "KO_Female"))
chisq.test(mouse_data2)
mouse_data2 <-
matrix(c(40, 9, 34, 7, 20, 15, 25, 20), nrow = 2, bycol = T)
mouse_data2 <-
matrix(c(40, 9, 34, 7, 20, 15, 25, 20), nrow = 2, byrow = F)
dimnames(mouse_data2) = list(c("Alive", "Dead"),
c("WT_Male", "WT_Female", "KO_Male", "KO_Female"))
chisq.test(mouse_data2)
mouse_data2 <-
matrix(c(40, 9, 34, 7, 20, 15, 25, 20), nrow = 2, byrow = F)
dimnames(mouse_data2) = list(c("Alive", "Dead"),
c("WT_Male", "WT_Female", "KO_Male", "KO_Female"))
chisq.test(mouse_data2)
# when apply chisqu.test on a 2D matrix, the expected value for each cell
# total_sum * probability_for_row_type * probability_for_column_type
setwd("E:\\A大学\\大二下\\ADS2\\W18 Power and Sample Size")
### task1
power.t.test(power = 0.8, delta = 0.25, sd = 0.42, sig.level = 0.05,
type = "two.sample", alternative = "one.sided")
# confirm by checking n = 35 and n = 36
power.t.test(n = 35, delta = 0.25, sd = 0.42, sig.level = 0.05,
type = "two.sample", alternative = "one.sided")
power.t.test(n = 36, delta = 0.25, sd = 0.42, sig.level = 0.05,
type = "two.sample", alternative = "one.sided")
power.t.test(power = 0.8, delta = 0.25, sd = 0.42, sig.level = 0.05,
type = "two.sample", alternative = "two.sided")
power.t.test(power = 0.8, delta = 0.25, sd = 0.42, sig.level = 0.05,
type = "two.sample", alternative = "two.sided")
# confirm by checking n = 45 and n = 46
power.t.test(n = 35, delta = 0.25, sd = 0.42, sig.level = 0.05,
type = "two.sample", alternative = "two.sided")
power.t.test(n = 36, delta = 0.25, sd = 0.42, sig.level = 0.05,
type = "two.sample", alternative = "two.sided")
power.t.test(power = 0.8, delta = 0.25, sd = 0.42, sig.level = 0.05,
type = "two.sample", alternative = "two.sided")
# confirm by checking n = 45 and n = 46
power.t.test(n = 45, delta = 0.25, sd = 0.42, sig.level = 0.05,
type = "two.sample", alternative = "two.sided")
power.t.test(n = 46, delta = 0.25, sd = 0.42, sig.level = 0.05,
type = "two.sample", alternative = "two.sided")
power.t.test(n = 10, delta = 0.4, sd = 0.5, sig.level = 0.05,
type = "two.sample", alternative = "two.sided")
power.t.test(n = 10, delta = 0.4, sd = 0.5, sig.level = 0.1,
type = "two.sample", alternative = "two.sided")
power.t.test(n = 5, delta = 0.4, sd = 0.5, sig.level = 0.05,
type = "two.sample", alternative = "two.sided")
power.t.test(n = 5, delta = 0.4, sd = 0.5, sig.level = 0.1,
type = "two.sample", alternative = "two.sided")
power.t.test(n = 20, delta = 0.8, sd = 0.5, sig.level = 0.1,
type = "two.sample", alternative = "two.sided")
power.t.test(n = 5, delta = 0.8, sd = 0.5, sig.level = 0.1,
type = "two.sample", alternative = "two.sided")
px = (1:100)*0.005
py = {}
for(alpha in px)
py = c(py, power.t.test(n = 20, delta = 0.4, sd = 0.5, sig.level = alpha,
type = "two.sample", alternative = "two.sided")$power)
plot(px, py, xlab = "significance level", ylab = "power", type = "l")
plot(px, py, xlab = "significance level", ylab = "power", type = "l",
lab = "power vs significant level")
plot(px, py, xlab = "significance level", ylab = "power", type = "l",
title = "power vs significant level")
plot(px, py, xlab = "significance level", ylab = "power", type = "l",
title = "power vs significant level")
plot(px, py, xlab = "significance level", ylab = "power", type = "l",
main = "power vs significant level")
plot(px, py, xlab = "significance level", ylab = "power", type = "o",
main = "power vs significant level")
px = (1:100)*0.005
py = {}
for(alpha in px)
py = c(py, power.t.test(n = 20, delta = 0.4, sd = 0.5, sig.level = alpha,
type = "two.sample", alternative = "two.sided")$power)
plot(px, py, xlab = "significance level", ylab = "power", type = "b",
main = "power vs significant level")
px = (1:100)*0.005
py = {}
for(alpha in px)
py = c(py, power.t.test(n = 20, delta = 0.4, sd = 0.5, sig.level = alpha,
type = "two.sample", alternative = "two.sided")$power)
plot(px, py, xlab = "significance level", ylab = "power",
main = "power vs significant level")
px = 3:102
py = {}
for(size in px)
py = c(py, power.t.test(n = size, delta = 0.4, sd = 0.5, sig.level = 0.05,
type = "two.sample", alternative = "two.sided")$power)
plot(px, py, xlab = "sample size", ylab = "power",
main = "power vs. sample size")
px = (1:100)*0.005
py = {}
for(alpha in px)
py = c(py, power.t.test(n = 5, delta = 0.8, sd = 0.5, sig.level = alpha,
type = "two.sample", alternative = "two.sided")$power)
plot(px, py, xlab = "significance level", ylab = "power",
main = "power vs. significant level")
px = 3:102
py = {}
for(size in px)
py = c(py, power.t.test(n = size, delta = 0.8, sd = 0.5, sig.level = 0.05,
type = "two.sample", alternative = "two.sided")$power)
plot(px, py, xlab = "sample size", ylab = "power",
main = "power vs. sample size")
delta = 0.8
standard_deviation = 0.5
alpha = 0.05
sample_size = c(2:101)
power = rep(0, length(sample_size)) #initialize power vector
for (i in 1:length(sample_size)) {
power[i] = power.t.test(n = sample_size[i], sd = standard_deviation,
d = delta, sig.level = alpha, type = "two.sample", alternative = "two.sided")$power
}
plot(x = sample_size, y = power, xlab = "sample size", ylab = "power",
main = "power vs sample_size")
plot(px, py, xlab = "sample size", ylab = "power",
main = "power vs. sample size", ylim = c(0, 1.0))
plot(px, py, xlab = "sample size", ylab = "power",
main = "power vs. sample size")#, ylim = c(0, 1.0)
plot(px, py, xlab = "sample size", ylab = "power",
main = "power vs. sample size", ylim = c(0, 1.0))
plot(px, py, xlab = "significance level", ylab = "power",
main = "power vs. significant level", ylim = c(0, 1.0))
px = (1:100)*0.01
py = {}
for(ef in px)
py = c(py, power.t.test(n = 5, delta = ef, sd = 0.5, sig.level = 0.05,
type = "two.sample", alternative = "two.sided")$power)
plot(px, py, xlab = "effect size", ylab = "power",
main = "power vs. effect size", ylim = c(0, 1.0))
px = seq(0, 10, by = 0.1)
py = {}
for(ef in px)
py = c(py, power.t.test(n = 5, delta = ef, sd = 0.5, sig.level = 0.05,
type = "two.sample", alternative = "two.sided")$power)
plot(px, py, xlab = "effect size", ylab = "power",
main = "power vs. effect size", ylim = c(0, 1.0))
px = seq(0, 10, by = 0.1)
py = {}
for(ef in px)
py = c(py, power.t.test(n = 5, delta = ef, sd = 0.5, sig.level = 0.05,
type = "two.sample", alternative = "two.sided")$power)
plot(px, py, xlab = "effect size", ylab = "power",
main = "power vs. effect size", ylim = c(0, 1.0))
sampleA = rnorm(n = 5, mean = 10, sd = 5)
sampleB = rnorm(n = 5, mean = 11, sd = 5)
t.test(sampleA, sampleB, alternative = "two.sided", paired = F)
px = seq(5,800,5)
py = {}
for(size in px){
sampleA = rnorm(n = size, mean = 10, sd = 5)
sampleB = rnorm(n = size, mean = 11, sd = 5)
py = c(py,
t.test(sampleA, sampleB, alternative = "two.sided", paired = F)$p.value)
}
plot(px, py, xlab = "sample size", ylab = "p-value", cex = 0.5)
plot(px, py, xlab = "sample size", ylab = "p-value", cex = 0.5)
abline(h = 0.05, col = "red")
px = seq(2, 2000, by = 10)
py = {}
for(size in px){
sampleA = rnorm(n = size, mean = 10, sd = 5)
sampleB = rnorm(n = size, mean = 11, sd = 5)
py = c(py,
t.test(sampleA, sampleB, alternative = "two.sided", paired = F)$p.value)
}
plot(px, py, xlab = "sample size", ylab = "p-value", cex = 0.5)
abline(h = 0.05, col = "red")
px = seq(2, 2000, by = 10)
py = {}
for(size in px){
sampleA = rnorm(n = size, mean = 10, sd = 5)
sampleB = rnorm(n = size, mean = 11, sd = 5)
py = c(py,
t.test(sampleA, sampleB)$p.value)
}
plot(px, py, xlab = "sample size", ylab = "p-value", cex = 0.5)
abline(h = 0.05, col = "red")
set.seed(13)
# sample_sizes = seq(2, 2000, by = 10)
# px = seq(5,800,5)
px = seq(2, 2000, by = 10)
py = {}
for(size in px){
sampleA = rnorm(n = size, mean = 10, sd = 5)
sampleB = rnorm(n = size, mean = 11, sd = 5)
py = c(py,
t.test(sampleA, sampleB, alternative = "two.sided", paired = F)$p.value)
}
plot(px, py, xlab = "sample size", ylab = "p-value", cex = 0.5)
abline(h = 0.05, col = "red")
set.seed(13)
# sample_sizes = seq(2, 2000, by = 10)
# px = seq(5,800,5)
px = seq(2, 2000, by = 10)
py = {}
for(size in px){
sampleA = rnorm(n = size, mean = 10, sd = 5)
sampleB = rnorm(n = size, mean = 11, sd = 5)
py = c(py,
t.test(sampleA, sampleB)$p.value)
}
plot(px, py, xlab = "sample size", ylab = "p-value", cex = 0.5)
abline(h = 0.05, col = "red")
