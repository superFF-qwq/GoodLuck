print(g)
dev.off()
}
}
source("~/.active-rstudio-document")
{
k = 4
id = sample(1:n, k)
centroids = data.frame(cluster = 1:k,
x = guests$x[id],
y = guests$y[id],
size = rep(0,k))
# centroids
guests$cluster = rep(0,n)
flag = T
time = 0
while(flag){
flag = F
for(i in 1:n){
Dist = rep(0,k)
for(j in 1:k)
Dist[j] = dist(guests$x[i], guests$y[i], centroids$x[j], centroids$y[j])
cluster = which.min(Dist)
if(cluster != guests$cluster[i]){
flag = T
guests$cluster[i] = cluster
}
}
print(guests)
print(flag)
for(j in 1:k){
centroids$x[j] = mean(guests$x[guests$cluster == j])
centroids$y[j] = mean(guests$y[guests$cluster == j])
}
guests$cluster = as.factor(guests$cluster)
g = ggplot(data = guests,
mapping = aes(x = x, y = y, color = cluster)) +
geom_point() +
geom_point(data = centroids,
mapping = aes(x = x, y = y),
shape = 3,
size = 2,
color = "red")
time = time + 1
name = paste0("kmeans", as.character(time))
name = paste0(name, ".png")
png(name, width=15, height=10, units="cm", pointsize=12, res=300)
print(g)
dev.off()
}
}
{
k = 4
id = sample(1:n, k)
centroids = data.frame(cluster = 1:k,
x = guests$x[id],
y = guests$y[id],
size = rep(0,k))
# centroids
guests$cluster = rep(0,n)
flag = T
time = 0
while(flag){
flag = F
for(i in 1:n){
Dist = rep(0,k)
for(j in 1:k)
Dist[j] = dist(guests$x[i], guests$y[i], centroids$x[j], centroids$y[j])
cluster = which.min(Dist)
if(cluster != guests$cluster[i]){
flag = T
guests$cluster[i] = cluster
}
}
print(guests)
print(flag)
for(j in 1:k){
centroids$x[j] = mean(guests$x[guests$cluster == j])
centroids$y[j] = mean(guests$y[guests$cluster == j])
}
guests$cluster = as.factor(guests$cluster)
g = ggplot(data = guests,
mapping = aes(x = x, y = y, color = cluster)) +
geom_point() +
geom_point(data = centroids,
mapping = aes(x = x, y = y),
shape = 3,
size = 2,
color = "red")
time = time + 1
name = paste0("kmeans", as.character(time))
name = paste0(name, ".png")
png(name, width=15, height=10, units="cm", pointsize=12, res=300)
print(g)
dev.off()
}
}
{
k = 2
id = sample(1:n, k)
centroids = data.frame(cluster = 1:k,
x = guests$x[id],
y = guests$y[id],
size = rep(0,k))
# centroids
guests$cluster = rep(0,n)
flag = T
time = 0
while(flag){
flag = F
for(i in 1:n){
Dist = rep(0,k)
for(j in 1:k)
Dist[j] = dist(guests$x[i], guests$y[i], centroids$x[j], centroids$y[j])
cluster = which.min(Dist)
if(cluster != guests$cluster[i]){
flag = T
guests$cluster[i] = cluster
}
}
print(guests)
print(flag)
for(j in 1:k){
centroids$x[j] = mean(guests$x[guests$cluster == j])
centroids$y[j] = mean(guests$y[guests$cluster == j])
}
guests$cluster = as.factor(guests$cluster)
g = ggplot(data = guests,
mapping = aes(x = x, y = y, color = cluster)) +
geom_point() +
geom_point(data = centroids,
mapping = aes(x = x, y = y),
shape = 3,
size = 2,
color = "red")
time = time + 1
name = paste0("kmeans", as.character(time))
name = paste0(name, ".png")
png(name, width=15, height=10, units="cm", pointsize=12, res=300)
print(g)
dev.off()
}
}
{
k = 2
id = sample(1:n, k)
centroids = data.frame(cluster = 1:k,
x = guests$x[id],
y = guests$y[id],
size = rep(0,k))
# centroids
guests$cluster = rep(0,n)
time = 0
while(T){
flag = F
for(i in 1:n){
Dist = rep(0,k)
for(j in 1:k)
Dist[j] = dist(guests$x[i], guests$y[i], centroids$x[j], centroids$y[j])
cluster = which.min(Dist)
if(cluster != guests$cluster[i]){
flag = T
guests$cluster[i] = cluster
}
}
if(!flag)
break
# print(guests)
# print(flag)
for(j in 1:k){
centroids$x[j] = mean(guests$x[guests$cluster == j])
centroids$y[j] = mean(guests$y[guests$cluster == j])
}
guests$cluster = as.factor(guests$cluster)
g = ggplot(data = guests,
mapping = aes(x = x, y = y, color = cluster)) +
geom_point() +
geom_point(data = centroids,
mapping = aes(x = x, y = y),
shape = 3,
size = 2,
color = "red")
time = time + 1
name = paste0("kmeans", as.character(time))
name = paste0(name, ".png")
png(name, width=15, height=10, units="cm", pointsize=12, res=300)
print(g)
dev.off()
}
}
{
k = 2
id = sample(1:n, k)
centroids = data.frame(cluster = 1:k,
x = guests$x[id],
y = guests$y[id],
size = rep(0,k))
# centroids
guests$cluster = rep(0,n)
time = 0
while(T){
flag = F
for(i in 1:n){
Dist = rep(0,k)
for(j in 1:k)
Dist[j] = dist(guests$x[i], guests$y[i], centroids$x[j], centroids$y[j])
cluster = which.min(Dist)
if(cluster != guests$cluster[i]){
flag = T
guests$cluster[i] = cluster
}
}
if(!flag)
break
# print(guests)
# print(flag)
for(j in 1:k){
centroids$x[j] = mean(guests$x[guests$cluster == j])
centroids$y[j] = mean(guests$y[guests$cluster == j])
}
guests$cluster = as.factor(guests$cluster)
g = ggplot(data = guests,
mapping = aes(x = x, y = y, color = cluster)) +
geom_point() +
geom_point(data = centroids,
mapping = aes(x = x, y = y),
shape = 3,
size = 2,
color = "red")
time = time + 1
name = paste0("kmeans", as.character(time))
name = paste0(name, ".png")
png(name, width=15, height=10, units="cm", pointsize=12, res=300)
print(g)
dev.off()
}
}
{
k = 2
id = sample(1:n, k)
centroids = data.frame(cluster = 1:k,
x = guests$x[id],
y = guests$y[id],
size = rep(0,k))
# centroids
guests$cluster = rep(0,n)
time = 0
while(T){
flag = F
for(i in 1:n){
Dist = rep(0,k)
for(j in 1:k)
Dist[j] = dist(guests$x[i], guests$y[i], centroids$x[j], centroids$y[j])
cluster = which.min(Dist)
if(cluster != guests$cluster[i]){
flag = T
guests$cluster[i] = cluster
}
}
if(flag == F)
break
# print(guests)
# print(flag)
for(j in 1:k){
centroids$x[j] = mean(guests$x[guests$cluster == j])
centroids$y[j] = mean(guests$y[guests$cluster == j])
}
guests$cluster = as.factor(guests$cluster)
g = ggplot(data = guests,
mapping = aes(x = x, y = y, color = cluster)) +
geom_point() +
geom_point(data = centroids,
mapping = aes(x = x, y = y),
shape = 3,
size = 2,
color = "red")
time = time + 1
name = paste0("kmeans", as.character(time))
name = paste0(name, ".png")
png(name, width=15, height=10, units="cm", pointsize=12, res=300)
print(g)
dev.off()
}
}
{
k = 3
id = sample(1:n, k)
centroids = data.frame(cluster = 1:k,
x = guests$x[id],
y = guests$y[id],
size = rep(0,k))
# centroids
guests$cluster = rep(0,n)
time = 0
while(T){
flag = F
for(i in 1:n){
Dist = rep(0,k)
for(j in 1:k)
Dist[j] = dist(guests$x[i], guests$y[i], centroids$x[j], centroids$y[j])
cluster = which.min(Dist)
if(cluster != guests$cluster[i]){
flag = T
guests$cluster[i] = cluster
}
}
if(flag == F)
break
# print(guests)
# print(flag)
for(j in 1:k){
centroids$x[j] = mean(guests$x[guests$cluster == j])
centroids$y[j] = mean(guests$y[guests$cluster == j])
}
guests$cluster = as.factor(guests$cluster)
g = ggplot(data = guests,
mapping = aes(x = x, y = y, color = cluster)) +
geom_point() +
geom_point(data = centroids,
mapping = aes(x = x, y = y),
shape = 3,
size = 2,
color = "red")
time = time + 1
name = paste0("kmeans", as.character(time))
name = paste0(name, ".png")
png(name, width=15, height=10, units="cm", pointsize=12, res=300)
print(g)
dev.off()
}
}
{
k = 5
id = sample(1:n, k)
centroids = data.frame(cluster = 1:k,
x = guests$x[id],
y = guests$y[id],
size = rep(0,k))
# centroids
guests$cluster = rep(0,n)
time = 0
while(T){
flag = F
for(i in 1:n){
Dist = rep(0,k)
for(j in 1:k)
Dist[j] = dist(guests$x[i], guests$y[i], centroids$x[j], centroids$y[j])
cluster = which.min(Dist)
if(cluster != guests$cluster[i]){
flag = T
guests$cluster[i] = cluster
}
}
if(flag == F)
break
# print(guests)
# print(flag)
for(j in 1:k){
centroids$x[j] = mean(guests$x[guests$cluster == j])
centroids$y[j] = mean(guests$y[guests$cluster == j])
}
guests$cluster = as.factor(guests$cluster)
g = ggplot(data = guests,
mapping = aes(x = x, y = y, color = cluster)) +
geom_point() +
geom_point(data = centroids,
mapping = aes(x = x, y = y),
shape = 3,
size = 2,
color = "red")
time = time + 1
name = paste0("kmeans", as.character(time))
name = paste0(name, ".png")
png(name, width=15, height=10, units="cm", pointsize=12, res=300)
print(g)
dev.off()
}
}
data0 = read.csv("guests.csv")
data <- data.frame(
x = data0$x,
y = data0$y
)
# 计算距离矩阵
dist_mat <- dist(data)
# 计算距离矩阵
dist_mat <- dist(as.matrix(data))
as.matrix(data)
# 创建一个简单的数据集
data <- data.frame(
x = data0$x,
y = data0$y
)
as.matrix(data)
data
data <-as.matrix(data = c(data0$x, data0$y), byrow = F, ncol = 2)
data <-as.matrix(data = c(data0$age_norm, data0$hours_norm), byrow = F, ncol = 2)
data = matrix(data = c(data0$age_norm, data0$hours_norm), byrow = F, ncol = 2)
data
# 计算距离矩阵
dist_mat <- dist(data)
# 计算距离矩阵
dist_mat <- dist(data)
# 计算距离矩阵
dist_mat <- stat::dist(data)
library(stats)
dist_mat <- dist(data)
library(readr)
library(dplyr)
library(ggplot2)
library(dplyr)
library(tidyverse)
library(tidyr)
setwd("E:\\A大学\\大二下\\ADS2\\W26 5.6-5.10 Clustering and Machine Learning")
data0 = read.csv("guests.csv")
head(data0)
n = nrow(data0)
guests = data.frame(id = 1:n,
x = data0$age_norm,
y = data0$hours_norm,
cluster = rep(0,n))
plot(x = guests$x, y = guests$y)
calc_dist = function(x1, y1, x2, y2){
return (sqrt((x1-x2)^2+(y1-y2)^2))
}
{
k = 5
id = sample(1:n, k)
centroids = data.frame(cluster = 1:k,
x = guests$x[id],
y = guests$y[id],
size = rep(0,k))
# centroids
guests$cluster = rep(0,n)
time = 0
while(T){
flag = F
for(i in 1:n){
Dist = rep(0,k)
for(j in 1:k)
Dist[j] = calc_dist(guests$x[i], guests$y[i], centroids$x[j], centroids$y[j])
cluster = which.min(Dist)
if(cluster != guests$cluster[i]){
flag = T
guests$cluster[i] = cluster
}
}
if(flag == F)
break
# print(guests)
# print(flag)
for(j in 1:k){
centroids$x[j] = mean(guests$x[guests$cluster == j])
centroids$y[j] = mean(guests$y[guests$cluster == j])
}
guests$cluster = as.factor(guests$cluster)
g = ggplot(data = guests,
mapping = aes(x = x, y = y, color = cluster)) +
geom_point() +
geom_point(data = centroids,
mapping = aes(x = x, y = y),
shape = 3,
size = 2,
color = "red")
time = time + 1
name = paste0("kmeans", as.character(time))
name = paste0(name, ".png")
png(name, width=15, height=10, units="cm", pointsize=12, res=300)
print(g)
dev.off()
}
}
guests
# 创建一个简单的数据集
data = matrix(data = c(data0$age_norm, data0$hours_norm), byrow = F, ncol = 2)
data
# 计算距离矩阵
library(stats)
dist_mat <- dist(data)
# 执行层次聚类
hc <- hclust(dist_mat)
# 可视化树状图
plot(hc)
# 切割树状图成两个簇
clusters <- cutree(hc, k = 2)
# 查看簇的分配
print(clusters)
# 将簇的分配添加到原始数据集中
data$cluster <- as.factor(clusters)
# 打印带有簇分配的数据集
print(data)
View(data)
View(data)
data = matrix(data = c(data0$age_norm, data0$hours_norm), byrow = F, ncol = 2)
# data
# 计算距离矩阵
library(stats)
dist_mat <- dist(data)
# 执行层次聚类
hc <- hclust(dist_mat)
# 可视化树状图
plot(hc, labels = data0$names)
# 可视化树状图
plot(hc, labels = data0$names, sub = "", xlab = "")
# 可视化树状图
plot(hc, labels = data0$names, xlab = "")
sub = "",
# 可视化树状图
plot(hc, labels = data0$names, sub = "", xlab = "")
clusters <- cutree(hc, k = 2)
# 查看簇的分配
print(clusters)
