data3 <- matrix(c(1,0,0,2,3,2,0,0,3,3,0,1,6,5,5,0), nrow = 4, byrow = T,
dimnames = list(c("Severe","Mild","Sporadic","Never"),
c("Spring","Summer","Fall","Winter")))
mat = matrix(data$count, nrow = 4, byrow = T,
dimnames = list(c("Spring", "Summer", "Autumn", "Winter"),
c("Severe", "Mild", "Sporadic", "Never")))
mosaicplot(mat)
mat = matrix(data$count, nrow = 4, byrow = T,
dimnames = list(c("Spring", "Summer", "Autumn", "Winter"),
c("Severe", "Mild", "Sporadic", "Never")))
mosaicplot(mat)
mosaicplot(t(data3), color = c("orange", "green", "orange", "green"),
main = "mosaics", cex.axis = 1)
mat = matrix(data$count, nrow = 4, byrow = T,
dimnames = list(c("Spring", "Summer", "Autumn", "Winter"),
c("Severe", "Mild", "Sporadic", "Never")))
mosaicplot(mat)
mat = matrix(data$count, nrow = 4, byrow = T,
dimnames = list(c("Spring", "Summer", "Autumn", "Winter"),
c("Severe", "Mild", "Sporadic", "Never")))
mosaicplot(mat, color = c("green", "pink", "orange", "skyblue"))
mat = matrix(data$count, nrow = 4, byrow = T,
dimnames = list(c("Spring", "Summer", "Autumn", "Winter"),
c("Severe", "Mild", "Sporadic", "Never")))
mosaicplot(mat, color = c("green", "pink", "orange", "skyblue"),
xlab = "Favorite season", ylab = "Observed allergic response")
mosaicplot(mat, color = c("green", "pink", "orange", "skyblue"),
xlab = "Favorite season", ylab = "Observed allergic response",
main = "n")
mosaicplot(mat, color = c("green", "pink", "orange", "skyblue"),
xlab = "Favorite season", ylab = "Observed allergic response",
main = "")
g3.2 = ggplot(data, mapping = aes(x = season, y = allergy, size = count))
g3.2
g3.2 = ggplot(data, mapping = aes(x = season, y = allergy, size = count))
g3.2 = g3.2 + geom_point(shape = 21, mapping = aes(color = season))
g3.2
g3.2 = ggplot(data, mapping = aes(x = season, y = allergy, size = count))
g3.2 = g3.2 + geom_point(shape = 21, mapping = aes(fill = season))
g3.2
g3.2 = g3.2 + theme(plot.title = element_text(hjust = 0.5))
g3.2 = ggplot(data, mapping = aes(x = season, y = allergy, size = count))
g3.2 = g3.2 + geom_point(shape = 21, mapping = aes(fill = season))
g3.2 = g3.2 + theme(plot.title = element_text(hjust = 0.5))
g3.2
g3.2 = ggplot(data, mapping = aes(x = season, y = allergy, size = count))
g3.2 = g3.2 + geom_point(shape = 21, mapping = aes(fill = season))
g3.2 = g3.2 + scale_size_area(max_size = 15)
g3.2
g3.2 = ggplot(data, mapping = aes(x = season, y = allergy, size = count))
g3.2 = g3.2 + geom_point(shape = 21, mapping = aes(fill = season))
g3.2 = g3.2 + scale_size_area(max_size = 15)
# enlarge all the balloons by proportion.
g3.2 = g3.2 + labs(title = "balloons")
g3.2
g3.2 = ggplot(data, mapping = aes(x = season, y = allergy, size = count))
g3.2 = g3.2 + geom_point(shape = 21, mapping = aes(fill = season))
g3.2 = g3.2 + scale_size_area(max_size = 15)
# enlarge all the balloons by proportion.
g3.2 = g3.2 + labs(title = "balloons")
g3.2 = g3.2 + theme(plot.title = element_text(hjust = 0.5))
g3.2
chisq.test(data4)
data4 <- matrix(c(7,2,3,7), nrow = 2, byrow = T,
dimnames = list(c("Alive","Dead"), c("WT","KO")))
chisq.test(data4)
chisq.test(data4, correct = F)
fisher.test(data4)
df <- c(1,2,3,4,6,9)
value <- c()
for (i in 1:length(df)){
small_value <- rchisq(10000, df[i])
value <- c(value, small_value)
}
data <- data.frame("df" = rep(df, each = 10000), "value" = value)
ggplot(data = data, aes(x = value)) +
geom_density(aes(color = factor(df)), size = 1)
X <- replicate(n = 4, rnorm(1000, 0, 1), simplify = T)
X_square <- X^2
sum <- apply(X_square, 1, sum)
plot(density(sum), main = "Chi-Square Distribution",
ylim = c(0,0.5), xlim = c(0,8),
xlab = "Simulation with 1000 datapoints")
X2 <- replicate(n = 4, rnorm(10000, 0, 1), simplify = T)
X2_square <- X2^2
sum2 <- apply(X2_square, 1, sum)
plot(density(sum2), main = "Chi-Square Distribution",
ylim = c(0,0.5), xlim = c(0,8),
xlab = "Simulation with 10000 datapoints")
### In this case, Chi-square is 8.1.
p_value_sim <- mean(sum2 >= 8.1)
p_value_real <- chisq.test(c(13, 10, 5, 3), p = rep(0.25, 4))$p.value
p_value_sim
p_value_real
data2.2 = data.frame(df = rep(df, each = 1e4), value = data2)
for (i in 1:length(df))
data2 = c(data2, rchisq(1e4, df = df[i])))
df <- c(1, 2, 3, 4, 6, 9)
data2 = {}
# for (i in 1:length(df)) {
#   data = density(rchisq(1e4, df = df[i]))
#   data2 = rbind(data2, data.frame(x = data$x, y = data$y, group = factor(i)))
# }
#
# g = ggplot(data = data2, mapping = aes(x = x, y = y, color = group))
# g = g + geom_line()
# g = g + xlim(0, 8)
# g
for (i in 1:length(df))
data2 = c(data2, rchisq(1e4, df = df[i])))
df <- c(1, 2, 3, 4, 6, 9)
data2 = {}
# for (i in 1:length(df)) {
#   data = density(rchisq(1e4, df = df[i]))
#   data2 = rbind(data2, data.frame(x = data$x, y = data$y, group = factor(i)))
# }
#
# g = ggplot(data = data2, mapping = aes(x = x, y = y, color = group))
# g = g + geom_line()
# g = g + xlim(0, 8)
# g
tot = 1e4
for (i in 1:length(df))
data2 = c(data2, rchisq(tot, df = df[i])))
tot = 1e4
for (i in 1:length(df))
data2 = c(data2, rchisq(tot, df = df[i]))
data2.2 = data.frame(df = rep(df, each = tot), value = data2)
g2 = gggplot(data = data2.2, mapping = aes(x = value, color = factor(df)))
tot = 1e4
for (i in 1:length(df))
data2 = c(data2, rchisq(tot, df = df[i]))
data2.2 = data.frame(df = rep(df, each = tot), value = data2)
g2 = ggplot(data = data2.2, mapping = aes(x = value, color = factor(df)))
g2 = g2 + geom_density()
tot = 1e4
g2
g2 = ggplot(data = data2.2, mapping = aes(x = value, color = factor(df)))
g2 = g2 + geom_density(size = 1)
g2
df <- c(1,2,3,4,6,9)
value <- c()
for (i in 1:length(df)){
small_value <- rchisq(10000, df[i])
value <- c(value, small_value)
}
data <- data.frame("df" = rep(df, each = 10000), "value" = value)
ggplot(data = data, aes(x = value)) +
geom_density(aes(color = factor(df)), size = 1)
tot = 1e4
for (i in 1:length(df))
data2 = c(data2, rchisq(tot, df = df[i]))
data2.2 = data.frame(df = rep(df, each = tot), value = data2)
g2 = ggplot(data = data2.2, mapping = aes(x = value, color = factor(df)))
g2 = g2 + geom_density(size = 1)
g2
g2 = ggplot(data = data2.2, mapping = aes(x = value, color = factor(df)))
g2 = g2 + geom_density(size = 1)
g2 = g2 + xlim(0, 8)
g2
chisq.test(Poll_seasons, correct = F, p = rep(1/4, 4))
Poll_seasons <- data.frame(Spring = 40, Summer = 30, Autumn = 18, Winter = 28)
chisq.test(Poll_seasons, correct = F, p = rep(1/4, 4))
chisq.test(Poll_seasons, p = rep(1/4, 4))
chisq.test(Poll_seasons)
observed = c(40, 32, 48, 57, 23)
chisq.test(observed)
sum = sum(observed)
sum
expected = rep(sum/5, times = 5)
expected
reptimes = 1e4
sum = sum(observed)
# sum
expected = rep(sum/5, times = 5)
# expected
data = {}
for(i in 1:reptimes){
sample = sample(1:5, sum, replace = T)
now = {}
for(j in 1:5)
now = c(now, sum(sample == j))
data = c(data, (now - expected)/expected)
}
plot(density(data))
reptimes = 1e4
sum = sum(observed)
# sum
expected = rep(sum/5, times = 5)
# expected
data = {}
for(i in 1:reptimes){
sample = sample(1:5, sum, replace = T)
now = {}
for(j in 1:5)
now = c(now, sum(sample == j))
data = c(data, (now - expected)^2/expected)
}
plot(density(data))
reptimes = 1e4
sum = sum(observed)
# sum
expected = rep(sum/5, times = 5)
# expected
data = {}
for(i in 1:reptimes){
sample = sample(1:5, sum, replace = T)
now = {}
for(j in 1:5)
now = c(now, sum(sample == j))
data = c(data, sum((now - expected)^2/expected))
}
plot(density(data))
reptimes = 1e4
sum = sum(observed)
# sum
expected = rep(sum/5, times = 5)
# expected
data = {}
for(i in 1:reptimes){
sample = sample(1:5, sum, replace = T)
now = {}
for(j in 1:5)
now = c(now, sum(sample == j))
data = c(data, sum((now - expected)^2/expected))
}
plot(density(data), main = "df = 4", xlab = "x^2")
reptimes = 1e4
sum = sum(observed)
# sum
expected = rep(sum/5, times = 5)
# expected
data = {}
for(i in 1:reptimes){
sample = sample(1:5, sum, replace = T)
now = {}
for(j in 1:5)
now = c(now, sum(sample == j))
data = c(data, sum((now - expected)^2/expected))
}
plot(density(data), main = "df = 4 chi-square distribution", xlab = "x^2")
plot(density(data), main = "df = 4 chi-square distribution", xlab = "x^2")
setwd("E:\\A大学\\大二下\\ADS2\\W19 Analysing categorical data")
library(tinytex)
library(rmarkdown)
library(knitr)
library(tidyverse)
library(cowplot)
### task1: Candy production
observed = c(40, 32, 48, 57, 23)
chisq.test(observed)
# p-value = 0.001444 < 0.05
# reject H0
# should not produce the same amount of ice cream with different flavours
## 1.1 Simulation to draw df = 4
# H0: There candy preferences for each flavour are evenly distributed.
reptimes = 1e4
sum = sum(observed)
# sum
expected = rep(sum/5, times = 5)
# expected
data = {}
for(i in 1:reptimes){
sample = sample(1:5, sum, replace = T)
now = {}
for(j in 1:5)
now = c(now, sum(sample == j))
data = c(data, sum((now - expected)^2/expected))
}
plot(density(data), main = "df = 4 chi-square distribution", xlab = "x^2")
plot(den, main = "df = 4 chi-square distribution", xlab = "x^2")
den = density(data)
plot(den, main = "df = 4 chi-square distribution", xlab = "x^2")
g = ggplot(data = data, mapping = aes(x = x, y = y)) +
geom_density()
g = ggplot(data = data, mapping = aes(x = x)) +
geom_density()
g = ggplot(data = data.frame(x = data), mapping = aes(x = x)) +
geom_density()
g
g = ggplot(data = data.frame(x = data), mapping = aes(x = x)) +
g = g + geom_density()
g = ggplot(data = data.frame(x = data), mapping = aes(x = x)) +
g = g + geom_density()
sum = sum(observed)
g = ggplot(data = data.frame(x = data), mapping = aes(x = x)) +
g = g + geom_density()
g = ggplot(data = data.frame(x = data), mapping = aes(x = x)) +
g = g + geom_density()
g = ggplot(data = data.frame(x = data), mapping = aes(x = x))
g = g + geom_density()
g = g + theme(axix.title.x = "x^2")
g
g = ggplot(data = data.frame(x = data), mapping = aes(x = x))
g = g + geom_density()
g = g + theme(axis.title.x = "x^2")
g
g = ggplot(data = data.frame(x = data), mapping = aes(x = x))
g = g + geom_density()
g = g + labs(x = "x^2")
g
g = ggplot(data = data.frame(x = data), mapping = aes(x = x))
g = g + geom_density()
g = g + labs(x = "x^2")
g = g + title("df = 4 chi-square distribution")
g
g = ggplot(data = data.frame(x = data), mapping = aes(x = x))
g = g + geom_density()
g = g + labs(x = "x^2",
title = "df = 4 chi-square distribution")
g
g = ggplot(data = data.frame(x = data), mapping = aes(x = x))
g = g + geom_density()
g = g + labs(x = "x^2",
title = "df = 4 chi-square distribution")
g = g + theme(plot.title = element_text(hjust = 0.5))
g
plot(density(data), main = "df = 4 chi-square distribution", xlab = "x^2")
den = density(data)
plot(den, main = "df = 4 chi-square distribution", xlab = "x^2")
den$x
den$bw
den$x[2] - den$x[1]
den$n
length(den$x)
den = density(data)
plot(den, main = "df = 4 chi-square distribution", xlab = "x^2")
pos = (observed - expected)^2/expected
index = which.min(abs(den$x - pos))
if(index == length(den$x))
p_value = 0
else
den = density(data)
plot(den, main = "df = 4 chi-square distribution", xlab = "x^2")
pos = sum((observed - expected)^2/expected)
index = which.min(abs(den$x - pos))
if(index == length(den$x))
p_value = 0
else
den = density(data)
plot(den, main = "df = 4 chi-square distribution", xlab = "x^2")
pos = sum((observed - expected)^2/expected)
index = which.min(abs(den$x - pos))
if(index == length(den$x)){
p_value = 0
}
else{
if(index == length(den$x)){
p_value = 0
} else{
p_value = sum(den[index+1:length(den$x)]) * (den$x[2] - den$x[1])
}
den = density(data)
plot(den, main = "df = 4 chi-square distribution", xlab = "x^2")
pos = sum((observed - expected)^2/expected)
index = which.min(abs(den$x - pos))
if(index == length(den$x)){
p_value = 0
} else{
p_value = sum(den$y[index+1:length(den$x)]) * (den$x[2] - den$x[1])
}
p_value
index
den$x
den$y
den$y[index+1:length(den$x)]
$y
den[index+1:length(den$x)]$y
$y
den$y[index+1:length(den$x)]
length(den$y[index+1:length(den$x)])
str(den$x)
mode(den$x)
summary(den$x)
length(observed[2:3])
str(observed)
mode(observed)
length(den$x[1:2])
length(den$x[333:335])
index+1
length(den$x)
length(den$y[index+1:length(den$x)])
length(den$y[333:335])
str(den$y)
mode(den$y)
summary(den$y)
length(den$y[index+1:length(den$x)])
index+1
length(den$x)
length(den$y[398:512])
length(den$y[index+1:length(den$x)])
a = index+1
b = length(den$x)
length(den$y[a:b])
length(den$y[(index+1):length(den$x)])
Poll_seasons <- data.frame(Spring = 40, Summer = 30, Autumn = 18, Winter = 28)
equal_preferences <- sum(Poll_seasons) * 0.25
reptimes = 1e3
data = {}
for(i in 1:reptimes){
sample = sample(1:4, 116, replace = T)
observed_seasons = data.frame(Spring = sum(sample == 1),
Summer = sum(sample == 2),
Autumn = sum(sample == 3),
Winter = sum(sample == 4))
data = c(data, sum((observed_seasons - equal_preferences)^2/equal_preferences))
}
plot(density(data), xlim = c(0,25))
squ = sum((Poll_seasons - equal_preferences)^2/equal_preferences)
den = density(data)
x_index <- which.min(abs(den$x - squ))
if (x_index == length(den$x)) {
prob_right <- 0
} else {
# 计算x = squ右侧所有小区间的面积之和
prob_right <- sum(den$y[(x_index+1):length(den$x)])*(den$x[2] - den$x[1])
}
prob_right
chisq.test(Poll_seasons, p = rep(1/4, 4))
chisq.test(Poll_seasons)
den = density(data)
plot(den, main = "df = 4 chi-square distribution", xlab = "x^2")
pos = sum((observed - expected)^2/expected)
index = which.min(abs(den$x - pos))
if(index == length(den$x)){
p_value = 0
} else{
length(den$y[(index+1):length(den$x)])
p_value = sum(den$y[index+1:length(den$x)]) * (den$x[2] - den$x[1])
}
p_value
den = density(data)
plot(den, main = "df = 4 chi-square distribution", xlab = "x^2")
pos = sum((observed - expected)^2/expected)
index = which.min(abs(den$x - pos))
if(index == length(den$x)){
p_value = 0
} else{
p_value = sum(den$y[(index+1):length(den$x)]) * (den$x[2] - den$x[1])
}
p_value
observed = c(40, 32, 48, 57, 23)
chisq.test(observed)
reptimes = 1e5
sum = sum(observed)
# sum
expected = rep(sum/5, times = 5)
# expected
data = {}
for(i in 1:reptimes){
sample = sample(1:5, sum, replace = T)
now = {}
for(j in 1:5)
now = c(now, sum(sample == j))
data = c(data, sum((now - expected)^2/expected))
}
den = density(data)
plot(den, main = "df = 4 chi-square distribution", xlab = "x^2")
pos = sum((observed - expected)^2/expected)
index = which.min(abs(den$x - pos))
if(index == length(den$x)){
p_value = 0
} else{
p_value = sum(den$y[(index+1):length(den$x)]) * (den$x[2] - den$x[1])
}
p_value
Poll_seasons <- data.frame(Spring = 40, Summer = 30, Autumn = 18, Winter = 28)
equal_preferences <- sum(Poll_seasons) * 0.25
reptimes = 1e5
data = {}
for(i in 1:reptimes){
sample = sample(1:4, 116, replace = T)
observed_seasons = data.frame(Spring = sum(sample == 1),
Summer = sum(sample == 2),
Autumn = sum(sample == 3),
Winter = sum(sample == 4))
data = c(data, sum((observed_seasons - equal_preferences)^2/equal_preferences))
}
reptimes = 1e5
data = {}
for(i in 1:reptimes){
sample = sample(1:4, 116, replace = T)
now = {}
for(j in 1:4)
now = c(now, sum(sample == j))
data = c(data, sum((now - equal_preferences)^2/equal_preferences))
}
Poll_seasons <- data.frame(Spring = 40, Summer = 30, Autumn = 18, Winter = 28)
equal_preferences <- sum(Poll_seasons) * 0.25
reptimes = 1e5
data = {}
for(i in 1:reptimes){
sample = sample(1:4, 116, replace = T)
now = {}
for(j in 1:4)
now = c(now, sum(sample == j))
data = c(data, sum((now - equal_preferences)^2/equal_preferences))
}
plot(density(data), xlim = c(0,25))
squ = sum((Poll_seasons - equal_preferences)^2/equal_preferences)
den = density(data)
x_index <- which.min(abs(den$x - squ))
if (x_index == length(den$x)) {
prob_right <- 0
} else {
# 计算x = squ右侧所有小区间的面积之和
prob_right <- sum(den$y[(x_index+1):length(den$x)])*(den$x[2] - den$x[1])
}
prob_right
chisq.test(Poll_seasons, p = rep(1/4, 4))
chisq.test(Poll_seasons)
plot(density(data), xlim = c(0,25), main = "df = 3 chi-square distribution")
