summarize(val = mean(val)) %>%
group_by(age) %>%
group_split() %>%
map(~{
before_data = filter(., year < 1998)
after_data = filter(., year >= 1998)
before = summary(lm(val ~ year, before_data))
after = summary(lm(val ~ year, after_data))
tibble(age = .$age[1],
before_r_squ = before$r.squared,
before_slope = before$coefficients[2],
after_r_squ = after$r.squared,
after_slope = after$coefficients[2],
slope_diff = after_slope - before_slope
)
}) %>%
bind_rows()
opioid_use_na4
opioid_use_na4 = opioid_use_na %>%
group_by(year, age) %>%
summarize(val = mean(val)) %>%
group_by(age) %>%
group_split() %>%
map(~{
before_data = filter(., year < 1998)
after_data = filter(., year >= 1998)
before = summary(lm(val ~ year, before_data))
after = summary(lm(val ~ year, after_data))
tibble(age = .$age[1],
before_r_squ = before$r.squared,
before_slope = before$coefficients[2],
after_r_squ = after$r.squared,
after_slope = after$coefficients[2],
slope_diff = after_slope - before_slope
)
}) %>%
bind_rows()
opioid_use_na4
opioid_use_na4 = opioid_use_na %>%
group_by(year, age) %>%
summarize(val = mean(val)) %>%
group_by(age) %>%
group_split() %>%
map(~{
before_data = filter(., year < 1998)
after_data = filter(., year >= 1998)
before = summary(lm(val ~ year, before_data))
after = summary(lm(val ~ year, after_data))
tibble(age = .$age[1],
before_r_squ = before$r.squared,
before_slope = before$coefficients[2],
after_r_squ = after$r.squared,
after_slope = after$coefficients[2],
slope_diff = after_slope - before_slope
)
}) %>%
bind_rows() %>%
arrange(desc(slope_diff))
opioid_use_na4
opioid_use_na4 = opioid_use_na %>%
filter(age != "25 to 29")
group_by(year, age) %>%
summarize(val = mean(val)) %>%
group_by(age) %>%
group_split() %>%
map(~{
before_data = filter(., year < 1998)
after_data = filter(., year >= 1998)
before = summary(lm(val ~ year, before_data))
after = summary(lm(val ~ year, after_data))
tibble(age = .$age[1],
before_r_squ = before$r.squared,
before_slope = before$coefficients[2],
after_r_squ = after$r.squared,
after_slope = after$coefficients[2],
slope_diff = after_slope - before_slope
)
}) %>%
bind_rows() %>%
arrange(desc(slope_diff))
opioid_use_na4 = opioid_use_na %>%
filter(age != "25 to 29") %>%
group_by(year, age) %>%
summarize(val = mean(val)) %>%
group_by(age) %>%
group_split() %>%
map(~{
before_data = filter(., year < 1998)
after_data = filter(., year >= 1998)
before = summary(lm(val ~ year, before_data))
after = summary(lm(val ~ year, after_data))
tibble(age = .$age[1],
before_r_squ = before$r.squared,
before_slope = before$coefficients[2],
after_r_squ = after$r.squared,
after_slope = after$coefficients[2],
slope_diff = after_slope - before_slope
)
}) %>%
bind_rows() %>%
arrange(desc(slope_diff))
opioid_use_na4
pd1 = seq(0.1, 1, by = 0.1)
pd2 = seq(0.1, 1, by = 0.1)
df = {}
for(i in pd1)
for(j in pd2){
bf = i / j
df = rbind(df, data.frame(pd1 = i, pd2 = j, bf = bf))
}
# summary(df)
# df
ggplot(df, mapping = aes(x = pd1, y = pd2, size = bf, color = bf)) +
geom_point(alpha = 0.7) +
scale_size(range = c(0, 10))
library(ggplot2)
library(dplyr)
library(zoo)
library(tidyverse)
library(tidyr)
library(knitr)
pd1 = seq(0.1, 1, by = 0.1)
pd2 = seq(0.1, 1, by = 0.1)
df = {}
for(i in pd1)
for(j in pd2){
bf = i / j
df = rbind(df, data.frame(pd1 = i, pd2 = j, bf = bf))
}
# summary(df)
# df
ggplot(df, mapping = aes(x = pd1, y = pd2, size = bf, color = bf)) +
geom_point(alpha = 0.7) +
scale_size(range = c(0, 10))
df = data.frame(pd1 = pd1, pd2 = pd2, bf = pd1/pd2)
df = df %>%
mutate(df = ifelse(df == "inf", 10, bf))
df
df = data.frame(pd1 = pd1, pd2 = pd2, bf = pd1/pd2)
df = df %>%
mutate(bf = ifelse(bf == "inf", 10, bf))
df
pd1 = seq(0.1, 1, by = 0.1)
pd2 = 1 - pd1
pd1 = seq(0.1, 1, by = 0.1)
pd2 = 1 - pd1
pd1
pd2
df = data.frame(pd1 = pd1, pd2 = pd2, bf = pd1/pd2)
df = df %>%
mutate(bf = ifelse(bf == "inf", 10, bf))
df
df
df = df %>%
mutate(bf = ifelse(bf == "Inf", 10, bf))
df
# summary(df)
# df
ggplot(df, mapping = aes(x = pd1, y = pd2, size = bf, color = bf)) +
geom_point(alpha = 0.7) +
scale_size(range = c(0, 10))
# summary(df)
# df
ggplot(df, mapping = aes(x = pd1, y = pd2, size = bf, color = bf)) +
geom_point(alpha = 0.7) +
scale_size(range = c(0, 10)) +
labs(x = 'P(DATA | H1)', y = 'P(DATA | H2)'))
# summary(df)
# df
ggplot(df, mapping = aes(x = pd1, y = pd2, size = bf, color = bf)) +
geom_point(alpha = 0.7) +
scale_size(range = c(0, 10)) +
labs(x = 'P(DATA | H1)', y = 'P(DATA | H2)')
# summary(df)
# df
ggplot(df, mapping = aes(x = pd1, y = pd2, size = bf, color = bf)) +
geom_point(alpha = 0.7) +
scale_size(range = c(0, 10)) +
labs(x = 'P(DATA | H1)', y = 'P(DATA | H2)',
size = "Bayes Factor", color = "")
ggplot(df, mapping = aes(x = pd1, y = pd2)) +
geom_point(alpha = 0.7) +
labs(x = 'P(DATA | H1)', y = 'P(DATA | H2)',
size = "Bayes Factor", color = "")
ggplot(df, mapping = aes(x = pd1, y = pd2)) +
theme_classic() +
geom_point(alpha = 0.7) +
labs(x = 'P(DATA | H1)', y = 'P(DATA | H2)',
size = "Bayes Factor", color = "")
df = df %>%
mutate(bf = ifelse(bf == "Inf", 10, bf))
df
ggplot(df, mapping = aes(x = pd1, y = pd2)) +
theme_classic() +
geom_point(size = 4, alpha = 0.2) +
labs(x = 'P(DATA | H1)', y = 'P(DATA | H2)',
size = "Bayes Factor", color = "")
ggplot(df, mapping = aes(x = pd1, y = pd2)) +
theme_classic() +
geom_point(size = 4, alpha = 0.2) +
geom_line(aes(color = bf))
ggplot(df, mapping = aes(x = pd1, y = pd2)) +
theme_classic() +
geom_point(size = 4, alpha = 0.2) +
geom_line(aes(color = bf)) +
labs(x = 'P(DATA | H1)', y = 'P(DATA | H2)',
size = "Bayes Factor", color = "")
ggplot(df, mapping = aes(x = pd1, y = pd2)) +
theme_classic() +
geom_point(size = 4, alpha = 0.2) +
geom_line(aes(color = bf), size = 1) +
labs(x = 'P(DATA | H1)', y = 'P(DATA | H2)',
size = "Bayes Factor", color = "")
labs(x = 'P(DATA | H1)', y = 'P(DATA | H2)',
color = "Bayes Factor")
ggplot(df, mapping = aes(x = pd1, y = pd2)) +
theme_classic() +
geom_point(size = 4, alpha = 0.2) +
geom_line(aes(color = bf), size = 1) +
scale_color_gradient(low = "orange", high = "darkred") +
labs(x = 'P(DATA | H1)', y = 'P(DATA | H2)',
color = "Bayes Factor")
ggplot(df, mapping = aes(x = pd1, y = pd2)) +
theme_classic() +
geom_point(size = 4, alpha = 0.2) +
geom_line(aes(color = bf), size = 1) +
scale_color_gradient(low = "orange", high = "darkred") + # , name = ""
labs(x = 'P(DATA | H1)', y = 'P(DATA | H2)',
color = "Bayes Factor")
p2 = p3 = p4 = p5 = 0.01
p6 = 0
p1 = 1 - p2 - p3 - p4 - p5 - p6
# p(D) = sigma p(D|Hi) * p(Hi)
pd = pd1*p1 + pd2*p2 + pd3*p3 + pd4*p4 + pd5*p5 + pd6*p6
pd1 = dbinom(7, size = 20, prob = 1/6)
# p(D|H2)
pd2 = dbinom(7, size = 20, prob = 2/6)
# p(D|H3)
pd3 = dbinom(7, size = 20, prob = 3/6)
# p(D|H4)
pd4 = dbinom(7, size = 20, prob = 4/6)
# p(D|H5)
pd5 = dbinom(7, size = 20, prob = 5/6)
# p(D|H6)
pd6 = dbinom(7, size = 20, prob = 6/6)
pd1
pd2
pd3
pd4
pd5
pd6
which.max(c(pd1,pd2,pd3,pd4,pd5,pd6))
## the practical std said that the priors
## are the following p(H1) = 0.96 P(H2) = p(H3) = p(H4) = p(H5) = 0.01
## Thoretically, p(Hi) = priors, these are designed by yourself
p2 = p3 = p4 = p5 = 0.01
p6 = 0
p1 = 1 - p2 - p3 - p4 - p5 - p6
# p(D) = sigma p(D|Hi) * p(Hi)
pd = pd1*p1 + pd2*p2 + pd3*p3 + pd4*p4 + pd5*p5 + pd6*p6
pd
# p(H1|D) = p(D|H1) * p(H1) / p(D)
p1d = pd1*p1/pd
p2d = pd2*p2/pd
p3d = pd3*p3/pd
p4d = pd4*p4/pd
p5d = pd5*p5/pd
p6d = pd6*p6/pd
p1d
p2d
p3d
p4d
p5d
p6d
which.max(c(p1d,p2d,p3d,p4d,p5d,p6d))
p2 = p3 = p4 = p5 = 0.2
p6 = 0
p1 = 1 - p2 - p3 - p4 - p5 - p6
# p(D) = sigma p(D|Hi) * p(Hi)
pd = pd1*p1 + pd2*p2 + pd3*p3 + pd4*p4 + pd5*p5 + pd6*p6
pd
# p(H1|D) = p(D|H1) * p(H1) / p(D)
p1d = pd1*p1/pd
p2d = pd2*p2/pd
p3d = pd3*p3/pd
p4d = pd4*p4/pd
p5d = pd5*p5/pd
p6d = pd6*p6/pd
p1d
p2d
p3d
p4d
p5d
p6d
which.max(c(p1d,p2d,p3d,p4d,p5d,p6d))
# p(D|H1) = 0.95
# p(D|H2) = 0.2
# p(H1) = 0.222
# p(H2) = 1 - 0.222
1 - 0.222
# p(D) = p(D|H1) * P(H1) + p(D}H2) * P(H2)
# p(D) = 0.95 * 0.222 + 0.2 * 0.778 =
0.95 * 0.222 + 0.2 * 0.778
# p(H1|D) = 0.95 * 0.222 / 0.3665
0.95 * 0.222 / 0.3665
# P(pregnant | test positive twice)
# D = test positive twice
# H1 = pregant
# H2 = non-pregnant
# P(pregnant | test positive twice) = p(H1|D) ?
# p(H1) = 0.222
# p(H2) = 1 - 0.222 = 0.778
# p(D|H1) = 0.95 * 0.95 =
0.95 * 0.95
# p(D|H2) = 0.2 * 0.2 = 0.04
# p(D) = p(D|H1) * P(H1) + p(D|H2) * p(H2) =
0.9025 * 0.222 + 0.04 * 0.778
# p(D|H1) * p(H1) = p(H1|D) * p(D)
# p(H1|D) = 0.9025 * 0.222 / 0.231475 =
0.9025 * 0.222 / 0.231475
# 其中A、B分别表示两组数据中某一发生和不发生的次数，
# C、D分别表示另一组数据中该发生和不发生的次数。
# 在流行病学研究中，OR值（odds ratio）是病例对照研究中的一个常用指标，
# 它指的是病例组中暴露人数与非暴露人数的比值除以对照组中暴露人数与非暴露人数的比值。
# OR值的具体意义如下：如果OR值等于1，表示该因素对疾病的发生不起作用；
# OR值大于1，表示该因素是危险因素；OR值小于1，表示该因素是保护因素。
#               pregnant   non-pregnant
# positive        0.95            0.2
# negative        0.05            0.8
# odds ratio = (0.95 / 0.05) / (0.2 / 0.8) =
(0.95 / 0.05) / (0.2 / 0.8)
# 其中A、B分别表示两组数据中某一发生和不发生的次数，
# C、D分别表示另一组数据中该发生和不发生的次数。
# 在流行病学研究中，OR值（odds ratio）是病例对照研究中的一个常用指标，
# 它指的是病例组中暴露人数与非暴露人数的比值除以对照组中暴露人数与非暴露人数的比值。
# OR值的具体意义如下：如果OR值等于1，表示该因素对疾病的发生不起作用；
# OR值大于1，表示该因素是危险因素；OR值小于1，表示该因素是保护因素。
#               test positive   test negative
# pregnant            0.95            0.05
# non-pregnant        0.2             0.8
# odds ratio = (0.95/0.2) / (0.05/0.8) =
(0.95/0.2) / (0.05/0.8)
# I feel the following is the correct format.
#               pregnant   non-pregnant
# positive        0.95            0.2
# negative        0.05            0.8
# odds ratio = (0.95/0.05) / (0.2/0.8) =
(0.95/0.05) / (0.2/0.8)
features = read.csv("features.csv")
features = read.csv("features.csv")
setwd("E:\\A大学\\大二下\\ADS2\\W23 4.15-4.19 Supervised and unsupervised learning")
features = read.csv("features.csv")
head(features)
contain(colnames(features), "trans")
grepl(colnames(features), "transx")
grepl(transx", colnames(features))
grepl("transx", colnames(features))
grepl("transx", colnames(features))
which(grepl("transx", colnames(features)))
range(which(grepl("transx", colnames(features))))
setwd("E:\\A大学\\大二下\\ADS2\\W23 4.15-4.19 Supervised and unsupervised learning")
range(which(grepl("transy", colnames(features))))
range(which(grepl("trans", colnames(features))))
l,r = range(which(grepl("trans", colnames(features))))
l, r = range(which(grepl("trans", colnames(features))))
{l, r} = range(which(grepl("trans", colnames(features))))
rg = range(which(grepl("trans", colnames(features))))
l = rg[1]
r = rg[2]
df = features %>%
group_by(label) %>%
group_split() %>%
map(~{
lapply(., sum)
}) %>%
bind_rows()
df = features %>%
group_by(label) %>%
group_split() %>%
map(~{
lapply(., sum)
}) %>%
bind_rows()
library(readr)
library(dplyr)
library(ggplot2)
library(dplyr)
library(tidyverse)
library(tidyr)
df = features %>%
group_by(label) %>%
group_split() %>%
map(~{
lapply(., sum)
}) %>%
bind_rows()
df
range(features$label)
colnames(df)
df = features %>%
group_by(label) %>%
group_split() %>%
map(~{
return (lapply(., sum))
}) %>%
bind_rows()
df
rg = range(which(grepl("trans", colnames(features))))
rgl = rg[1]
rgr = rg[2]
df = features %>%
group_by(label) %>%
group_split() %>%
map(~{
return (lapply(.$[rgl: rgr], sum))
df = features %>%
group_by(label) %>%
group_split() %>%
map(~{
return (lapply(.[, rgl: rgr], sum))
}) %>%
bind_rows()
df
colnames(df)
colnames(df) = paste0("avg_", colnames(df))
colnames(df)
rownames(df)
# colnames(df)
# rownames(df)
df = df %>%
gather(key = "measurement", value = "value", -label)
df = df %>%
gather(key = "measurement", value = "value", -label)
# colnames(df)
# rownames(df)
colnames(df)
# colnames(df)
rownames(df)
df = features %>%
group_by(label) %>%
group_split() %>%
map(~{
return cbind(label = .$label[1], lapply(.[, rgl: rgr], sum))
df = features %>%
group_by(label) %>%
group_split() %>%
map(~{
return (cbind(label = .$label[1], lapply(.[, rgl: rgr], sum)))
}) %>%
bind_rows()
# df
colnames(df)
df = features %>%
group_by(label) %>%
group_split() %>%
map(~{
return (cbind(label = .$label[1], lapply(.[, rgl: rgr], sum)))
}) %>%
bind_rows()
rlang::last_trace()
lapply(.[, rgl: rgr], sum)
lapply(features[1, rgl: rgr], sum)
lapply(features[, rgl: rgr], sum)
as.list(lapply(features[, rgl: rgr], sum))
as.matrix(lapply(features[, rgl: rgr], nrow = 1))
as.matrix(lapply(features[, rgl: rgr], FUN = sum), nrow = 1)
as.matrix(lapply(features[, rgl: rgr], FUN = sum), ncol = 1)
as.matrix(data = lapply(features[, rgl: rgr], FUN = sum), nrow = 1)
as.matrix(data = lapply(features[, rgl: rgr], FUN = sum), nrow = 1)
as.matrix(t(lapply(features[, rgl: rgr], FUN = sum)))
as.matrix(t(lapply(features[, rgl: rgr], FUN = mean)))
return (cbind(label = .$label[1], t(lapply(.[, rgl: rgr], mean)))
}) %>%
return (cbind(label = .$label[1], t(lapply(.[, rgl: rgr], mean))))
return (cbind(label = .$label[1], as.matrix(t(lapply(.[, rgl: rgr], mean))))
}) %>%
df = features %>%
group_by(label) %>%
group_split() %>%
map(~{
return (cbind(label = .$label[1], as.matrix(t(lapply(.[, rgl: rgr], mean))))
}) %>%
df = features %>%
group_by(label) %>%
group_split() %>%
map(~{
return (cbind(label = .$label[1], t(lapply(.[, rgl: rgr], mean))))
}) %>%
bind_rows()
df = features %>%
group_by(label) %>%
group_split() %>%
map(~{
return (cbind(label = .$label[1], as.matirx(t(lapply(.[, rgl: rgr], mean))))
}) %>%
df = features %>%
group_by(label) %>%
group_split() %>%
map(~{
return (cbind(label = .$label[1],
as.matirx(t(lapply(.[, rgl: rgr], mean)))))
}) %>%
bind_rows()
df = features %>%
group_by(label) %>%
group_split() %>%
map(~{
return (cbind(label = .$label[1],
as.matrix(t(lapply(.[, rgl: rgr], mean)))))
}) %>%
bind_rows()
as.matrix(t(lapply(features[, rgl: rgr], FUN = mean)))
